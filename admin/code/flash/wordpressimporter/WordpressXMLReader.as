package  {		import flash.external.ExternalInterface;	import com.serialization.json.JSON;	import flash.utils.Timer;	import flash.events.TimerEvent;	public class WordpressXMLReader {		private var xmlData:XML;		private var postNodes:XMLList;		private var currentPost:int = 0;				// XML namespaces...		private var wpNS:Namespace = null; // WP namespace		private var contentNS:Namespace = null; // WP content namespace		private var excerptNS:Namespace = null; // WP excerpt namespace		private var dcNS:Namespace = null; // Use for post creator					// //////////////////////////////////////////////////////////////		public function WordpressXMLReader() {			// constructor code					}				// //////////////////////////////////////////////////////////////		public function process(data:String){						xmlData = new XML(data);						// Find the namespaces defined in the root node			//trace(xmlData.namespaceDeclarations());			// FInd the namespaces we need, and assign to member variables					/*			var namespaces:Array = xmlData.namespaceDeclarations();			for (var i=0; i<namespaces.length; i++){				var temp:String = namespaces[i];				if (temp.indexOf('wordpress.org/export') > 0){ wpNS = namespaces[i]}				if (temp.indexOf('excerpt') > 0){ excerptNS = namespaces[i]}				if (temp.indexOf('content') > 0){ contentNS = namespaces[i]}				if (temp.indexOf('purl.org') > 0){ dcNS = namespaces[i]}			}			*/			// Good article on namespaces: http://www.senocular.com/flash/tutorials/as3withflashcs3/?page=4						wpNS = new Namespace("http://wordpress.org/export/1.0/");			excerptNS = new Namespace("http://wordpress.org/export/1.0/excerpt/");			contentNS = new Namespace("http://purl.org/rss/1.0/modules/content/");			dcNS = new Namespace("http://purl.org/dc/elements/1.1/");						//trace(xmlData.channel.wpNS::base_site_url);			ExternalInterface.addCallback("getNextPost", this.getNextPost); 			// Get list of posts			postNodes = this.xmlData.channel.item;						currentPost = 0;			//ExternalInterface.call('WordpressImporter.onReady');			// Parse global date			this.parseChannel();			//this.parsePosts();									// 			//this.processPostNode();		}				// //////////////////////////////////////////////////////////////		private function getNextPost(){			if (currentPost < postNodes.length()){				processPostNode(postNodes[currentPost]);					currentPost++;						}			else {				ExternalInterface.call('WordpressImporter.onComplete');						}		}				// //////////////////////////////////////////////////////////////				private function parseChannel(){			var channelData:XMLList = this.xmlData.channel;						var title:String = channelData.@title;			var categories:String = ""; // csv list of categories 			var tags:String = ""; // csv list of tags 								// Get category list..........			var cat_nicename:String = "";			var cat_name:String = "";			var category_parent:String = "";			// <wp:category>			//     <wp:category_nicename>all</wp:category_nicename>			//     <wp:category_parent></wp:category_parent>			//     <wp:cat_name><![CDATA[All posts]]></wp:cat_name>			// </wp:category>			for each(var catNode:XML in channelData.wpNS::category){				    								cat_name = catNode.wpNS::category_nicename;				cat_nicename = catNode.wpNS::cat_name;				category_parent = catNode.wpNS::category_parent;							if (categories != ""){					categories += ",";				}				categories += cat_name;								//trace("Category: name = '" + cat_name + "' nice_name = '" + cat_nicename + "' category_parent = '" + category_parent + "'");							}									// Get tag list..........						var tag_name:String = "";			var tag_slug:String = "";						// <wp:tag>			//     <wp:tag_slug>awards</wp:tag_slug>			//     <wp:tag_name><![CDATA[awards]]></wp:tag_name>			// </wp:tag>						for each(var tagNode:XML in channelData.wpNS::tag){				    										tag_name = tagNode.wpNS::tag_name;					//tag_slug = tagNode.wpNS::tag_slug;										if (tags != ""){						tags += ",";					}					tags += tag_name;										//trace("Tag: name = '" + tag_name + "' tag_slug = '" + tag_slug + "'");							}										var noPosts:int = 0;			var postType:String = postNode						for each(var postNode:XML in this.xmlData.channel.item){				if (postNode.wpNS::post_type == 'post'){					noPosts++;						}			}						ExternalInterface.call('WordpressImporter.onMeta', noPosts, tags, categories);					}		// //////////////////////////////////////////////////////////////		private function processPostNode(postNode:XML){								var postCategories:String = ""; // csv list of categories for this post				var postTags:String = ""; // csv list of tags for this post																				var postCreator = postNode.dcNS::creator;				var postContent = postNode.contentNS::encoded;				var postExcerpt:String = "";				var postType:String = postNode.wpNS::post_type;				var postID:String = postNode.wpNS::post_id;				var postStatus:String = postNode.wpNS::status;				var postDate:String = postNode.wpNS::post_date;				var postDateGMT:String = postNode.wpNS::post_date_gmt;				var commentStatus:String = postNode.wpNS::comment_status;				var pingStatus:String = postNode.wpNS::ping_status;				var postName:String = postNode.wpNS::post_name;				var postPassword:String = postNode.wpNS::post_password;				var postTitle:String = escape(postNode.title);				var postLink:String = postNode.link;				var pubDate:String = postNode.pubDate;				// If this is a post, then process it...				if (postType == 'post'){										// Get categories and tags					for each(var catNode:XML in postNode.category){																		if (catNode.attribute("domain") == 'tag'){							if (catNode.attribute("nicename").length() == 0){								if (postTags != ""){									postTags += ",";								}								postTags += catNode.text();															}						}						else {							if (postCategories != ""){								postCategories += ",";							}							postCategories += catNode.text();						}					}										var postComments:Array = new Array(postNode.wpNS::comment.length());					var ct:int = 0;										// Get comments					for each(var commentNode:XML in postNode.wpNS::comment){						postComments[ct] = {							id: 			commentNode.wpNS::comment_id + "",							author: 		commentNode.wpNS::comment_author + "",							author_email: 	commentNode.wpNS::comment_author_email + "",							author_url: 	commentNode.wpNS::comment_author_url + "",							author_ip: 		commentNode.wpNS::comment_author_IP + "",							date: 			commentNode.wpNS::comment_date + "",							date_gmt: 		commentNode.wpNS::comment_date_gmt + "",							content: 		escape(commentNode.wpNS::comment_content),							approved: 		commentNode.wpNS::comment_approved + "",							parent_id: 		commentNode.wpNS::comment_parent + ""						}												ct++;					}										trace("Found: " + postComments.length + " comments");										// Send to JS......					var canComment:Boolean = false;					if (commentStatus == 'open') {						canComment = true;					}					else {						canComment = false;					}										//trace(postTags);					/*					if (postComments.length > 0){						ExternalInterface.call('WordpressImporter.onPost', [{title:postTitle, date:postDate, date_gmt:postDateGMT, can_comment:canComment, password: postPassword, author: postCreator, 																			tags: postTags, categories: postCategories, content: postContent, excerpt: postExcerpt, comments: ''}]);										}					else {						ExternalInterface.call('WordpressImporter.onPost', [{title:postTitle, date:postDate, date_gmt:postDateGMT, can_comment:canComment, password: postPassword, author: postCreator, 																			tags: postTags, categories: postCategories, content: postContent, excerpt: postExcerpt, comments: postComments}]);					}					*/										if (postComments.length > 1){						trace(postComments[0].id + " " + postComments[0].author);						}										// 'Published','Draft','Private','Revision'					var athenaStatus:String = "";					if (postStatus == "publish") athenaStatus = "Published";					if (postStatus == "draft") athenaStatus = "Draft";					if (postStatus == "private") athenaStatus = "Private";										var postObject:Object = {						title:postTitle, 						date:postDate, 						date_gmt:postDateGMT, 						can_comment:canComment, 						password: postPassword, 						author: postCreator, 						tags: postTags, 						categories: postCategories, 						status: athenaStatus,						content: escape(postContent), 						excerpt: postExcerpt};											var postJSONString:String = JSON.serialize(postObject);					var commentJSONString:String = JSON.serialize(postComments);										ExternalInterface.call('WordpressImporter.onPost', postJSONString, commentJSONString);																			}						}		// //////////////////////////////////////////////////////////////		private function parsePosts(){			// <item>			//     <title></title>			//     <link>http://www.charlottegeary.com/blog/2005/01/24/207/</link>			//     <pubDate>Mon, 24 Jan 2005 16:26:00 +0000</pubDate>			//     <dc:creator><![CDATA[charlottegeary]]></dc:creator>			//     <category><![CDATA[All posts]]></category>			//     <category domain="category" nicename="all"><![CDATA[All posts]]></category>			//     <category domain="tag"><![CDATA[my family]]></category>			//     <category domain="tag" nicename="my-family"><![CDATA[my family]]></category>			//     <category domain="tag"><![CDATA[my pets]]></category>			//     <category domain="tag" nicename="my-pets"><![CDATA[my pets]]></category>			//     <category domain="tag"><![CDATA[personal photos]]></category>			//     <category domain="tag" nicename="personal-photos"><![CDATA[personal photos]]></category>			//     <guid isPermaLink="false">http://www.charlottegeary.com/blog/?p=207</guid>			//     <description></description>			//     <content:encoded><![CDATA[..POST HTML...]]></content:encoded>			//     <excerpt:encoded><![CDATA[]]></excerpt:encoded>			//     <wp:post_id>207</wp:post_id>			//     <wp:post_date>2005-01-24 10:26:00</wp:post_date>			//     <wp:post_date_gmt>2005-01-24 16:26:00</wp:post_date_gmt>			//     <wp:comment_status>open</wp:comment_status>			//     <wp:ping_status>open</wp:ping_status>			//     <wp:post_name>207</wp:post_name>			//     <wp:status>publish</wp:status>			//     <wp:post_parent>0</wp:post_parent>			//     <wp:menu_order>0</wp:menu_order>			//     <wp:post_type>post</wp:post_type>			//     <wp:post_password></wp:post_password>			//     <wp:postmeta>			//         <wp:meta_key>lj_itemid</wp:meta_key>			//         <wp:meta_value>58</wp:meta_value>			//     </wp:postmeta>			//     <wp:postmeta>			//         <wp:meta_key>lj_permalink</wp:meta_key>			//        <wp:meta_value>http://charlottegeary.livejournal.com/14885.html</wp:meta_value>			//     </wp:postmeta>			//     <wp:comment>			//         <wp:comment_id>15743</wp:comment_id>			//         <wp:comment_author><![CDATA[onelargecat]]></wp:comment_author>			//         <wp:comment_author_email></wp:comment_author_email>			//         <wp:comment_author_url>http://onelargecat.livejournal.com/</wp:comment_author_url>			//         <wp:comment_author_IP></wp:comment_author_IP>			//         <wp:comment_date>2009-06-27 01:04:16</wp:comment_date>			//         <wp:comment_date_gmt>2009-06-27 07:04:16</wp:comment_date_gmt>			//         <wp:comment_content><![CDATA[<p>Love them!!!!!</p>]]></wp:comment_content>			//         <wp:comment_approved>1</wp:comment_approved>			//         <wp:comment_type></wp:comment_type>			//         <wp:comment_parent>0</wp:comment_parent>			//         <wp:comment_user_id>0</wp:comment_user_id>			//     </wp:comment>			//     <wp:comment>			//         <wp:comment_id>15743</wp:comment_id>			//         <wp:comment_author><![CDATA[onelargecat]]></wp:comment_author>			//         <wp:comment_author_email></wp:comment_author_email>			//         <wp:comment_author_url>http://onelargecat.livejournal.com/</wp:comment_author_url>			//         <wp:comment_author_IP></wp:comment_author_IP>			//         <wp:comment_date>2009-06-27 01:04:16</wp:comment_date>			//         <wp:comment_date_gmt>2009-06-27 07:04:16</wp:comment_date_gmt>			//         <wp:comment_content><![CDATA[<p>Love them!!!!!</p>]]></wp:comment_content>			//         <wp:comment_approved>1</wp:comment_approved>			//         <wp:comment_type></wp:comment_type>			//         <wp:comment_parent>0</wp:comment_parent>			//         <wp:comment_user_id>0</wp:comment_user_id>			//     </wp:comment>						// </item>						for each(var postNode:XML in this.xmlData.channel.item){								var postCategories:String = ""; // csv list of categories for this post				var postTags:String = ""; // csv list of tags for this post																				var postCreator = postNode.dcNS::creator;				var postContent = postNode.contentNS::encoded;//				var postExcerpt = postNode.excerptNS::encoded;//				var postCreator:String = "";//				var postContent:String = "";				var postExcerpt:String = "";				var postType:String = postNode.wpNS::post_type;				var postID:String = postNode.wpNS::post_id;				var postStatus:String = postNode.wpNS::status;				var postDate:String = postNode.wpNS::post_date;				var postDateGMT:String = postNode.wpNS::post_date_gmt;				var commentStatus:String = postNode.wpNS::comment_status;				var pingStatus:String = postNode.wpNS::ping_status;				var postName:String = postNode.wpNS::post_name;				var postPassword:String = postNode.wpNS::post_password;				var postTitle:String = postNode.wpNS::title;				var postLink:String = postNode.wpNS::link;				var pubDate:String = postNode.wpNS::pubDate;				// If this is a post, then process it...				if (postType == 'post'){										// Get categories and tags					for each(var catNode:XML in postNode.category){																		if (catNode.attribute("domain") == 'tag'){							if (catNode.attribute("nicename").length() == 0){								if (postTags != ""){									postTags += ",";								}								postTags += catNode.text();															}						}						else {							if (postCategories != ""){								postCategories += ",";							}							postCategories += catNode.text();						}					}								//     <wp:comment>			//         <wp:comment_id>15743</wp:comment_id>			//         <wp:comment_author><![CDATA[onelargecat]]></wp:comment_author>			//         <wp:comment_author_email></wp:comment_author_email>			//         <wp:comment_author_url>http://onelargecat.livejournal.com/</wp:comment_author_url>			//         <wp:comment_author_IP></wp:comment_author_IP>			//         <wp:comment_date>2009-06-27 01:04:16</wp:comment_date>			//         <wp:comment_date_gmt>2009-06-27 07:04:16</wp:comment_date_gmt>			//         <wp:comment_content><![CDATA[<p>Love them!!!!!</p>]]></wp:comment_content>			//         <wp:comment_approved>1</wp:comment_approved>			//         <wp:comment_type></wp:comment_type>			//         <wp:comment_parent>0</wp:comment_parent>			//         <wp:comment_user_id>0</wp:comment_user_id>			//     </wp:comment>									var postComments:Array = new Array(postNode.wpNS::comment.length());					var ct:int = 0;										// Get comments					for each(var commentNode:XML in postNode.wpNS::comment){						postComments[ct] = {							id: 			commentNode.wpNS::comment_id + "",							author: 		commentNode.wpNS::comment_author + "",							author_email: 	commentNode.wpNS::comment_author_email + "",							author_url: 	commentNode.wpNS::comment_author_url + "",							author_ip: 		commentNode.wpNS::comment_author_IP + "",							date: 			commentNode.wpNS::comment_date + "",							date_gmt: 		commentNode.wpNS::comment_date_gmt + "",							content: 		escape(commentNode.wpNS::comment_content),							approved: 		commentNode.wpNS::comment_approved + "",							parent_id: 		commentNode.wpNS::comment_parent + ""						}												ct++;					}										trace("Found: " + postComments.length + " comments");										// Send to JS......					var canComment:Boolean = false;					if (commentStatus == 'open') {						canComment = true;					}					else {						canComment = false;					}										//trace(postTags);					/*					if (postComments.length > 0){						ExternalInterface.call('WordpressImporter.onPost', [{title:postTitle, date:postDate, date_gmt:postDateGMT, can_comment:canComment, password: postPassword, author: postCreator, 																			tags: postTags, categories: postCategories, content: postContent, excerpt: postExcerpt, comments: ''}]);										}					else {						ExternalInterface.call('WordpressImporter.onPost', [{title:postTitle, date:postDate, date_gmt:postDateGMT, can_comment:canComment, password: postPassword, author: postCreator, 																			tags: postTags, categories: postCategories, content: postContent, excerpt: postExcerpt, comments: postComments}]);					}					*/										if (postComments.length > 1){						trace(postComments[0].id + " " + postComments[0].author);						}										// 'Published','Draft','Private','Revision'					var athenaStatus:String = "";					if (postStatus == "publish") athenaStatus = "Published";					if (postStatus == "draft") athenaStatus = "Draft";					if (postStatus == "private") athenaStatus = "Private";										var postObject:Object = {						title:postTitle, 						date:postDate, 						date_gmt:postDateGMT, 						can_comment:canComment, 						password: postPassword, 						author: postCreator, 						tags: postTags, 						categories: postCategories, 						status: athenaStatus,						content: escape(postContent), 						excerpt: postExcerpt};											var postJSONString:String = JSON.serialize(postObject);					var commentJSONString:String = JSON.serialize(postComments);										ExternalInterface.call('WordpressImporter.onPost', postJSONString, commentJSONString);										// Wait for a few										var startT:Date = new Date();					var endT:Date = new Date();					while((endT.time - startT.time) < 500){						endT = new Date();					}														}			}		}	}}