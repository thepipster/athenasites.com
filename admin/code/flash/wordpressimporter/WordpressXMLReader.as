package {	import flash.external.ExternalInterface;	import com.serialization.json.JSON;	import flash.utils.Timer;	import flash.events.TimerEvent;	public class WordpressXMLReader	{		private var xmlData:XML;		private var postNodes:XMLList;		private var currentPost:int = 0;		// XML namespaces...		private var wpNS:Namespace = null;// WP namespace		private var contentNS:Namespace = null;// WP content namespace		private var excerptNS:Namespace = null;// WP excerpt namespace		private var dcNS:Namespace = null;// Use for post creator		// //////////////////////////////////////////////////////////////		public function WordpressXMLReader()		{			// constructor code		}		// //////////////////////////////////////////////////////////////		public function process(data:String)		{			xmlData = new XML(data);			// Find the namespaces defined in the root node			//trace(xmlData.namespaceDeclarations());			// FInd the namespaces we need, and assign to member variables			/*			var namespaces:Array = xmlData.namespaceDeclarations();			for (var i=0; i<namespaces.length; i++){			var temp:String = namespaces[i];			if (temp.indexOf('wordpress.org/export') > 0){ wpNS = namespaces[i]}			if (temp.indexOf('excerpt') > 0){ excerptNS = namespaces[i]}			if (temp.indexOf('content') > 0){ contentNS = namespaces[i]}			if (temp.indexOf('purl.org') > 0){ dcNS = namespaces[i]}			}			*/			// Good article on namespaces: http://www.senocular.com/flash/tutorials/as3withflashcs3/?page=4			wpNS = new Namespace("http://wordpress.org/export/1.0/");			excerptNS = new Namespace("http://wordpress.org/export/1.0/excerpt/");			contentNS = new Namespace("http://purl.org/rss/1.0/modules/content/");			dcNS = new Namespace("http://purl.org/dc/elements/1.1/");			//trace(xmlData.channel.wpNS::base_site_url);			if (ExternalInterface.available){				ExternalInterface.addCallback("getNextPost", this.getNextPost);			}			// Get list of posts;			postNodes = this.xmlData.channel.item;			currentPost = -1;			//ExternalInterface.call('WordpressImporter.onReady');			// Parse global date			this.parseChannel();			//this.parsePosts();			if (!ExternalInterface.available){				getNextPost();			}			// 			//this.processPostNode();		}		// //////////////////////////////////////////////////////////////		private function getNextPost()		{			currentPost++;						if (currentPost < postNodes.length())			{				trace("Processing post " + currentPost + " of " + postNodes.length());				processPostNode(postNodes[currentPost]);			}			else			{				if (ExternalInterface.available){					ExternalInterface.call('WordpressImporter.onComplete');				}				trace('Complete!');			}		}		// //////////////////////////////////////////////////////////////;		private function processPostNode(postNode:XML)		{			trace('Entering processPostNode');			try {												var postCategories:String = "";// csv list of categories for this post				var postTags:String = "";// csv list of tags for this post				var postCreator = postNode.dcNS::creator;				var postContent = postNode.contentNS::encoded;				var postExcerpt:String = "";					var postType:String = postNode.wpNS::post_type;				var postID:String = postNode.wpNS::post_id;				var postStatus:String = postNode.wpNS::status;				var postDate:String = postNode.wpNS::post_date;				var postDateGMT:String = postNode.wpNS::post_date_gmt;				var commentStatus:String = postNode.wpNS::comment_status;				var pingStatus:String = postNode.wpNS::ping_status;				var postName:String = postNode.wpNS::post_name;				var postPassword:String = postNode.wpNS::post_password;				var postTitle:String = escape(postNode.title);				var postLink:String = postNode.link;				var pubDate:String = postNode.pubDate;					trace('processPostNode - postType = ' + postType);					// If this is a post, then process it...				if (postType == 'post')				{									// Get categories and tags					if (postNode.category != undefined){												for each (var catNode:XML in postNode.category)						{									if (catNode.attribute("domain") == 'tag')							{								if (catNode.attribute("nicename").length() == 0)								{									if (postTags != "")									{										postTags +=  ",";									}									postTags +=  catNode.text();								}							}							else							{								if (postCategories != "")								{									postCategories +=  ",";								}								postCategories +=  catNode.text();							}						}					}						var postComments:Array = null;						if (postNode.wpNS::comment != undefined){							postComments = new Array(postNode.wpNS::comment.length());											var ct:int = 0;								// Get comments						for each (var commentNode:XML in postNode.wpNS::comment)						{														var approvedStr:String = "Pending";														// 'Pending','Approved','Trash','Spam','PossibleSpam'							if (commentNode.wpNS::comment_approved == 1){								approvedStr = "Approved";							}							else if (commentNode.wpNS::comment_approved == "spam"){								approvedStr = "Spam";							}							else if (commentNode.wpNS::comment_approved == 0){								approvedStr = "Trash";							}							else {								if (ExternalInterface.available){									ExternalInterface.call('WordpressImporter.onError','Unknown approval state:'+commentNode.wpNS::comment_approved);								}								trace(commentNode.wpNS::comment_approved);							}														postComments[ct] = {								id: commentNode.wpNS::comment_id + "",								post_id:postID,								author: commentNode.wpNS::comment_author + "",								author_email: commentNode.wpNS::comment_author_email + "",								author_url: commentNode.wpNS::comment_author_url + "",								author_ip: commentNode.wpNS::comment_author_IP + "",								date: commentNode.wpNS::comment_date + "",								date_gmt: commentNode.wpNS::comment_date_gmt + "",								content: escape(commentNode.wpNS::comment_content),								approved: approvedStr + "",								parent_id: commentNode.wpNS::comment_parent + ""							};							ct++;						}								trace("Found: " + postComments.length + " comments");					}					else {						trace("Found: no comments");									}																// Send to JS......					var canComment:Boolean = false;					if (commentStatus == 'open')					{						canComment = true;					}					else					{						canComment = false;					}						// 'Published','Draft','Private','Revision'					var athenaStatus:String = "";					if (postStatus == "publish")					{						athenaStatus = "Published";					}					else if (postStatus == "draft")					{						athenaStatus = "Draft";					}					else if (postStatus == "private")					{						athenaStatus = "Private";					}					else if (postStatus == "trash")					{						athenaStatus = "Trash";					}						var postObject:Object = {						id:postID,						title:postTitle, 						date:postDate, 						date_gmt:postDateGMT, 						can_comment:canComment, 						password: postPassword, 						author: postCreator, 						tags: postTags, 						categories: postCategories, 						status: athenaStatus,						content: escape(postContent), 						excerpt: postExcerpt					};						var postJSONString:String = JSON.serialize(postObject);					var commentJSONString:String = "";									if (postComments != null){						commentJSONString = JSON.serialize(postComments);					}						if (ExternalInterface.available){						ExternalInterface.call('WordpressImporter.onPost', postJSONString, commentJSONString);					}					else {						trace(postJSONString);						trace(commentJSONString);						getNextPost();					}					}				else {					// Post type was not Post, so pass back empty post info as we don't support importing pages, attachments etc, (yet)					//currentPost++;					//getNextPost();					if (ExternalInterface.available){						ExternalInterface.call('WordpressImporter.onPost', "", "");					}					else {						getNextPost();					}									}							} 			catch (error:Error) {				if (ExternalInterface.available){					ExternalInterface.call('WordpressImporter.onError','Error...'+error.toString());				}				trace("Error in reading post: " + error.toString());			}						trace('processPostNode - leaving');		}		// //////////////////////////////////////////////////////////////		private function parseChannel()		{			var channelData:XMLList = this.xmlData.channel;			var title:String = channelData. @ title;			var categories:String = "";// csv list of categories 			var tags:String = "";// csv list of tags 			// Get category list..........			var cat_nicename:String = "";			var cat_name:String = "";			var category_parent:String = "";			// <wp:category>			//     <wp:category_nicename>all</wp:category_nicename>			//     <wp:category_parent></wp:category_parent>			//     <wp:cat_name><![CDATA[All posts]]></wp:cat_name>			// </wp:category>			for each (var catNode:XML in channelData.wpNS::category)			{				cat_name = catNode.wpNS::category_nicename;				cat_nicename = catNode.wpNS::cat_name;				category_parent = catNode.wpNS::category_parent;				if (categories != "")				{					categories +=  ",";				}				categories +=  cat_name;				//trace("Category: name = '" + cat_name + "' nice_name = '" + cat_nicename + "' category_parent = '" + category_parent + "'");			}			// Get tag list..........			var tag_name:String = "";			var tag_slug:String = "";			// <wp:tag>			//     <wp:tag_slug>awards</wp:tag_slug>			//     <wp:tag_name><![CDATA[awards]]></wp:tag_name>			// </wp:tag>			for each (var tagNode:XML in channelData.wpNS::tag)			{				tag_name = tagNode.wpNS::tag_name;				//tag_slug = tagNode.wpNS::tag_slug;				if (tags != "")				{					tags +=  ",";				}				tags +=  tag_name;				//trace("Tag: name = '" + tag_name + "' tag_slug = '" + tag_slug + "'");			}			var noPosts:int = 0;			var noItems:int = 0;			var postType:String = postNode;			for each (var postNode:XML in this.xmlData.channel.item)			{				noItems++;								if (postNode.wpNS::post_type == 'post')				{					noPosts++;				}			}			if (ExternalInterface.available){				ExternalInterface.call('WordpressImporter.onMeta', noItems, noPosts, tags, categories);			}		}		// //////////////////////////////////////////////////////////////	}}